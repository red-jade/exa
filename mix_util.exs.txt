  # -----------------------------
  # *****  EXA boilerplate  *****
  # copied into all EXA libraries
  # -----------------------------
  
  # main entry point for dependencies
  defp exa_deps(name, libs), do: System.argv() |> hd() |> do_deps(name,libs)

  defp do_deps("exa", _name, _libs), do: [exa_project()]

  defp do_deps("deps.clean", _name, _libs) do
    Enum.each([:local, :main, :tag], fn scope ->
      scope |> deps_file() |> File.rm()
    end)

    [exa_project()]
  end

  defp do_deps(cmd, name, libs) do
    scope = arg_build()
    deps_path = deps_file(scope)

    if not File.exists?(deps_path) do
      # invoke the exa project mix task to generate dependencies
      exa_args = Enum.map([:exa, scope | libs], &to_string/1)
      
      case System.cmd("mix", exa_args) do
        {_out, 0} -> :ok
        {out, n} -> args = Enum.join(exa_args, " ")
        raise RuntimeError, message: "Failed 'mix #{args}' status #{n} '#{out}'"
      end
      
      if not File.exists?(deps_path) do
        raise RuntimeError, message: "Cannot create dependency file: #{deps_path}"
      end
    end

    deps = deps_path |> Code.eval_file() |> elem(0)

    if String.starts_with?(cmd, ["deps", "compile"]) do
      IO.inspect(deps, label: "#{name} #{scope}")
    end
    [exa_project()|deps]
  end

  # the deps literal file to be written for each scope
  defp deps_file(scope), do: Path.join([".", "deps", "deps_#{scope}.ex"])

  # parse the build scope from:
  # - mix command line --build option
  # - MIX_BUILD system environment variable
  # - default to "tag"
  defp arg_build() do
    default = case System.fetch_env("MIX_BUILD") do
      :error -> "tag"
      {:ok, mix_build} -> mix_build
    end

    System.argv() 
    |> tl() 
    |> OptionParser.parse(strict: [build: :string])
    |> elem(0)
    |> Keyword.get(:build, default)
    |> String.to_atom()
  end

  # the main exa umbrella library project
  # provides the 'mix exa' task to generate dependencies
  defp exa_project() do
    {
      :exa,
      git: "https://github.com/red-jade/exa.git", 
      branch: "main",
      only: [:dev, :test], 
      runtime: false
    }
  end
